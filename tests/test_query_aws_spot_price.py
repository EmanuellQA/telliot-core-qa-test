""" Unit tests for AWS price queries

Copyright (c) 2021-, Tellor Development Community
Distributed under the terms of the MIT License.
"""
import pytest

from telliot_core.queries.price.aws_spot_price import AWSSpotPrice


def test_constructor():
    """Validate spot price query"""
    q = AWSSpotPrice(
        parameters=[
            {
                "type": "string",
                "name": "zone",
                "value": "us-east-f1",
            },
            {
                "type": "string",
                "name": "instance",
                "value": "i3.16xlarge",
            },
        ]
    )

    exp = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0cAWSSpotPrice\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\nus-east-f1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0bi3.16xlarge\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  # noqa: E501

    print(q.query_data)
    assert q.query_data == exp

    # print(q.query_data.hex())
    # exp = ''
    # assert q.query_id.hex() == exp


def test_invalid_params():
    with pytest.raises(AssertionError):
        _ = AWSSpotPrice(
            parameters=[
                {
                    "type": "string",
                    "name": "wrong_name",
                    "value": "us-east-f1",
                },
                {
                    "type": "string",
                    "name": "instance",
                    "value": "i3.16xlarge",
                },
            ]
        )
    
    with pytest.raises(AssertionError):
        _ = AWSSpotPrice(
            parameters=[
                {
                    "type": "string",
                    "name": "zone",
                    "value": "us-east-f1",
                },
                {
                    "type": "string",
                    "name": "wrong_name",
                    "value": "i3.16xlarge",
                },
            ]
        )


